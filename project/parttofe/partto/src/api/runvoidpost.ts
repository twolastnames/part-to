////////////////////////////////////////////////////////////
//  DO NOT DIRECTLY EDIT THIS FILE!!!
//  This file is generated by the updateapi custom django command.
//  Unless functionality needs to be added, the best way to have
//  changes in here is to modify the openapi definition in
//  endpoints.openapi.yaml
////////////////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/no-unused-vars */
import { PostArgumentsBase, doPost } from "./helpers";
import { DateTime } from "../shared/dateTime";
import { Duration } from "../shared/duration";

import {
  parameterMarshalers,
  bodyMarshalers,
  unmarshalers,
  Four04Reply,
  RunOperationReply,
  RunOperation,
  PartTo,
  TaskDefinition,
  RunState,
  PartToId,
  RunStateId,
  TaskDefinitionId,
} from "./sharedschemas";
/* eslint-enable @typescript-eslint/no-unused-vars */

export type RunvoidPostBody = RunOperation;

type WireBody = {
  runState?: RunStateId | undefined;
  definitions: Array<TaskDefinitionId>;
};

export type RunvoidPost200Body = { runState: RunStateId };

type Wire200Body = { runState: RunStateId };

interface ExternalMappers {
  [status: string]: (arg: Wire200Body) => RunvoidPost200Body;

  200: (arg: Wire200Body) => RunvoidPost200Body;
}

interface ExternalHandlers {
  [status: string]: (arg: RunvoidPost200Body) => void;

  200: (arg: RunvoidPost200Body) => void;
}

export interface JobPostArguments extends PostArgumentsBase<RunvoidPostBody> {
  on200: (arg: RunvoidPost200Body) => void;
}

export const doRunvoidPost = async ({
  body,

  on200,
}: JobPostArguments) =>
  await doPost<
    WireBody,
    Wire200Body,
    RunvoidPost200Body,
    ExternalMappers,
    ExternalHandlers
  >(
    "/api/run/void",
    {
      runState: bodyMarshalers.unrequired["RunStateId"](body.runState),
      definitions: body.definitions.map((value) =>
        bodyMarshalers.required["TaskDefinitionId"](value),
      ),
    },
    {
      200: (body: Wire200Body) => ({
        runState: unmarshalers.required["RunStateId"](body.runState),
      }),
    },
    {
      200: on200,
    },
  );
