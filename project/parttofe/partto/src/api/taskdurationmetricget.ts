////////////////////////////////////////////////////////////
//  DO NOT DIRECTLY EDIT THIS FILE!!!
//  This file is generated by the updateapi custom django command.
//  Unless functionality needs to be added, the best way to have
//  changes in here is to modify the openapi definition in
//  endpoints.openapi.yaml
////////////////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/no-unused-vars */
import { Result, Options, useGet } from "./helpers";
import { DateTime } from "../shared/dateTime";
import { Duration } from "../shared/duration";

import {
  parameterMarshalers,
  unmarshalers,
  Four04Reply,
  RunOperationReply,
  RunOperation,
  PartTo,
  TaskDefinition,
  RunState,
  PartToId,
  RunStateId,
  TaskDefinitionId,
} from "./sharedschemas";

/* eslint-enable @typescript-eslint/no-unused-vars */

export type TaskdurationmetricGet200Body = {
  estimatedDuration: Duration;
  initialEstimation?: { duration: Duration; usedInCalculation: boolean };
  from: Array<{ start?: DateTime | undefined; end?: DateTime | undefined }>;
};

type Wire200Body = {
  estimatedDuration: Duration;
  initialEstimation?: { duration: Duration; usedInCalculation: boolean };
  from: Array<{ start?: DateTime | undefined; end?: DateTime | undefined }>;
};

export type TaskdurationmetricGetArguments = { task: TaskDefinitionId };

interface ExternalMappers {
  [status: string]: (arg: Wire200Body) => TaskdurationmetricGet200Body;

  200: (arg: Wire200Body) => TaskdurationmetricGet200Body;
}

export type TaskdurationmetricGetResult = Result<TaskdurationmetricGet200Body>;

export const useTaskdurationmetricGet: (
  args: TaskdurationmetricGetArguments,
  options?: Options,
) => TaskdurationmetricGetResult = ({ task }, options) =>
  useGet<Wire200Body, TaskdurationmetricGet200Body, ExternalMappers>(
    "/api/metric/task",
    [
      {
        name: "task",
        value: parameterMarshalers.required["TaskDefinitionId"](task),
      },
    ],
    {
      200: (body: Wire200Body) => ({
        estimatedDuration: unmarshalers.required["Duration"](
          body.estimatedDuration,
        ),
        initialEstimation: {
          duration: unmarshalers.required["Duration"](
            body.initialEstimation.duration,
          ),
          usedInCalculation: unmarshalers.required["boolean"](
            body.initialEstimation.usedInCalculation,
          ),
        },
        from: body.from.map((value) => ({
          start: unmarshalers.unrequired["DateTime"](value.start),
          end: unmarshalers.unrequired["DateTime"](value.end),
        })),
      }),
    },
    options,
  );
