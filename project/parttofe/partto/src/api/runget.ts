////////////////////////////////////////////////////////////
//  DO NOT DIRECTLY EDIT THIS FILE!!!
//  This file is generated by the updateapi custom django command.
//  Unless functionality needs to be added, the best way to have
//  changes in here is to modify the openapi definition in
//  endpoints.openapi.yaml
////////////////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/no-unused-vars */
import { Result, Options, useGet } from "./helpers";
import { DateTime } from "../shared/dateTime";
import { Duration } from "../shared/duration";

import {
  parameterMarshalers,
  unmarshalers,
  integer,
  Four04Reply,
  RunOperationReply,
  RunOperation,
  PartTo,
  TaskDefinition,
  RunState,
  PartToId,
  RunStateId,
  TaskDefinitionId,
} from "./sharedschemas";

/* eslint-enable @typescript-eslint/no-unused-vars */

export type RunGet200Body = {
  runState: RunStateId;
  duration: Duration;
  timestamp: DateTime;
  upcoming: Array<{ till: Duration; task: TaskDefinitionId }>;
  timers: {
    enforced: Array<{
      task: TaskDefinitionId;
      started: DateTime;
      duration: Duration;
    }>;
    laxed: Array<{
      task: TaskDefinitionId;
      started: DateTime;
      duration: Duration;
    }>;
    imminent: Array<{ till: Duration; task: TaskDefinitionId }>;
  };
  complete?: DateTime | undefined;
  activePartTos?: Array<PartToId>;
  tasks: Array<TaskDefinitionId>;
  duties: Array<TaskDefinitionId>;
  staged: Array<TaskDefinitionId>;
  started: Array<TaskDefinitionId>;
  created: Array<TaskDefinitionId>;
  voided: Array<TaskDefinitionId>;
  completed: Array<TaskDefinitionId>;
};

type Wire200Body = {
  runState: RunStateId;
  duration: number;
  timestamp: string;
  upcoming: Array<{ till: number; task: TaskDefinitionId }>;
  timers: {
    enforced: Array<{
      task: TaskDefinitionId;
      started: string;
      duration: number;
    }>;
    laxed: Array<{ task: TaskDefinitionId; started: string; duration: number }>;
    imminent: Array<{ till: number; task: TaskDefinitionId }>;
  };
  complete?: string | undefined;
  activePartTos?: Array<PartToId>;
  tasks: Array<TaskDefinitionId>;
  duties: Array<TaskDefinitionId>;
  staged: Array<TaskDefinitionId>;
  started: Array<TaskDefinitionId>;
  created: Array<TaskDefinitionId>;
  voided: Array<TaskDefinitionId>;
  completed: Array<TaskDefinitionId>;
};

export type RunGetArguments = { runState: RunStateId };

interface ExternalMappers {
  [status: string]: (arg: Wire200Body) => RunGet200Body;

  200: (arg: Wire200Body) => RunGet200Body;
}

export type RunGetResult = Result<RunGet200Body>;

export const useRunGet: (
  args: RunGetArguments,
  options?: Options,
) => RunGetResult = ({ runState }, options) =>
  useGet<Wire200Body, RunGet200Body, ExternalMappers>(
    "/api/run/",
    [
      {
        name: "runState",
        value: parameterMarshalers.required["RunStateId"](runState),
      },
    ],
    {
      200: (body: Wire200Body) => ({
        runState: unmarshalers.required["RunStateId"](body.runState),
        duration: unmarshalers.required["duration"](body.duration),
        timestamp: unmarshalers.required["date-time"](body.timestamp),
        upcoming: body.upcoming.map((value) => ({
          till: unmarshalers.required["duration"](value.till),
          task: unmarshalers.required["TaskDefinitionId"](value.task),
        })),
        timers: {
          enforced: body.timers.enforced.map((value) => ({
            task: unmarshalers.required["TaskDefinitionId"](value.task),
            started: unmarshalers.required["date-time"](value.started),
            duration: unmarshalers.required["duration"](value.duration),
          })),
          laxed: body.timers.laxed.map((value) => ({
            task: unmarshalers.required["TaskDefinitionId"](value.task),
            started: unmarshalers.required["date-time"](value.started),
            duration: unmarshalers.required["duration"](value.duration),
          })),
          imminent: body.timers.imminent.map((value) => ({
            till: unmarshalers.required["duration"](value.till),
            task: unmarshalers.required["TaskDefinitionId"](value.task),
          })),
        },
        complete: unmarshalers.unrequired["date-time"](body.complete),
        activePartTos: body.activePartTos?.map((value) =>
          unmarshalers.required["PartToId"](value),
        ),
        tasks: body.tasks.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        duties: body.duties.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        staged: body.staged.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        started: body.started.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        created: body.created.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        voided: body.voided.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
        completed: body.completed.map((value) =>
          unmarshalers.required["TaskDefinitionId"](value),
        ),
      }),
    },
    options,
  );
