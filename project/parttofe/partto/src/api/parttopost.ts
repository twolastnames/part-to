////////////////////////////////////////////////////////////
//  DO NOT DIRECTLY EDIT THIS FILE!!!
//  This file is generated by the updateapi custom django command.
//  Unless functionality needs to be added, the best way to have
//  changes in here is to modify the openapi definition in
//  endpoints.openapi.yaml
////////////////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/no-unused-vars */
import { PostArgumentsBase, doPost } from "./helpers";
import { DateTime } from "../shared/dateTime";
import { Duration } from "../shared/duration";

import {
  parameterMarshalers,
  bodyMarshalers,
  unmarshalers,
  integer,
  Four04Reply,
  RunOperationReply,
  RunOperation,
  PartTo,
  TaskDefinition,
  RunState,
  PartToId,
  RunStateId,
  TaskDefinitionId,
} from "./sharedschemas";
/* eslint-enable @typescript-eslint/no-unused-vars */

export type ParttoPostBody = {
  part_to: { name: string; depends: Array<string> };
  tasks: Array<TaskDefinition>;
};

type WireBody = {
  part_to: { name: string; depends: Array<string> };
  tasks: Array<{
    name: string;
    duration: number;
    description: string;
    ingredients: Array<string>;
    tools: Array<string>;
    depends?: Array<string>;
    engagement?: integer | undefined;
  }>;
};

export type ParttoPost200Body = { partTo: PartToId; message: string };

type Wire200Body = { partTo: PartToId; message: string };

interface ExternalMappers {
  [status: string]: (arg: Wire200Body) => ParttoPost200Body;

  200: (arg: Wire200Body) => ParttoPost200Body;
}

interface ExternalHandlers {
  [status: string]: (arg: ParttoPost200Body) => void;

  200: (arg: ParttoPost200Body) => void;
}

export interface JobPostArguments extends PostArgumentsBase<ParttoPostBody> {
  on200: (arg: ParttoPost200Body) => void;
}

export const doParttoPost = async ({
  body,

  on200,
}: JobPostArguments) =>
  await doPost<
    WireBody,
    Wire200Body,
    ParttoPost200Body,
    ExternalMappers,
    ExternalHandlers
  >(
    "/api/partto/",
    {
      part_to: {
        name: bodyMarshalers.required["string"](body.part_to.name),
        depends: body.part_to.depends.map((value) =>
          bodyMarshalers.required["string"](value),
        ),
      },
      tasks: body.tasks.map((value) => ({
        name: bodyMarshalers.required["string"](value.name),
        duration: bodyMarshalers.required["duration"](value.duration),
        description: bodyMarshalers.required["string"](value.description),
        ingredients: value.ingredients.map((value) =>
          bodyMarshalers.required["string"](value),
        ),
        tools: value.tools.map((value) =>
          bodyMarshalers.required["string"](value),
        ),
        depends: value.depends?.map((value) =>
          bodyMarshalers.required["string"](value),
        ),
        engagement: bodyMarshalers.unrequired["integer"](value.engagement),
      })),
    },
    {
      200: (body: Wire200Body) => ({
        partTo: unmarshalers.required["PartToId"](body.partTo),
        message: unmarshalers.required["string"](body.message),
      }),
    },
    {
      200: on200,
    },
  );
