from release import Release
from unittest.mock import MagicMock, call
import unittest
import tempfile
from freezegun import freeze_time
import os
from collections import namedtuple

VERSION_FILENAME = os.path.join(tempfile.gettempdir(), "versionunittestdata.toml")

NOTES_FILENAME = os.path.join(tempfile.gettempdir(), "notesunittestdata.toml")

Commit = namedtuple("Commit", "message")


class ReleaseTestError(RuntimeError):
    pass


class ReleaseTestClass(unittest.TestCase):
    def setUp(self):
        self.repo = MagicMock()
        self.repo.bare = False
        self.repo.index = MagicMock()
        self.repo.create_tag = MagicMock()
        self.repo.index.add = MagicMock()
        self.repo.index.commit = MagicMock()
        self.repo.git = MagicMock()
        self.repo.git.checkout = MagicMock()
        self.repo.is_dirty = MagicMock(return_value=False)
        self.error = MagicMock(side_effect=ReleaseTestError())
        self.repo.active_branch = MagicMock()
        self.repo.active_branch.name = "master"
        with open(NOTES_FILENAME, "w") as file:
            file.write("previous notes\n")
        with open(VERSION_FILENAME, "w") as file:
            file.write(
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
"""
            )

    def test_error_on_bare_repo(self):
        self.repo.bare = True
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with("This should be in a repository")
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_on_dirty_repo(self):
        self.repo.is_dirty = MagicMock(return_value=True)
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with("The repo should not be dirty")
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_if_not_on_release_or_master_branch(self):
        self.repo.active_branch.name = "error_branch"
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with(
            'The active branch "error_branch" needs to be "master" or start with "release-"'
        )
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_with_wip_prefix_on_master(self):
        self.repo.iter_commits = lambda: [Commit("wip: it good"), Commit("feat: big")]
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with(
            '"wip:" commit semantics are not allowed in a release'
        )
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_with_wip_prefix_on_release_branch(self):
        self.repo.active_branch.name = "release_2.2"
        self.repo.iter_commits = lambda: [Commit("docs: big"), Commit("wip: it good")]
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with(
            '"wip:" commit semantics are not allowed in a release'
        )
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_with_unrecognizable_prefix(self):
        self.repo.iter_commits = lambda: [
            Commit("doc big"),
            Commit("fix: it good"),
            Commit("release: it good"),
        ]
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with(
            'can not find recognizable semantic prefix for commit "doc big"'
        )
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    def test_error_with_unknown_prefix(self):
        self.repo.iter_commits = lambda: [
            Commit("docs: big"),
            Commit("feefifofum: it good"),
            Commit("release: it good"),
        ]
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with('unknown semantic prefix "feefifofum"')
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )

    @freeze_time("2024-03-21 01:23:45")
    def test_will_increment_a_minor(self):
        self.repo.iter_commits = lambda: [
            Commit("feat: boom!"),
            Commit("docs: big"),
            Commit("fix: it good"),
            Commit("release: 2.3.4.5-alpha"),
        ]
        Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.repo.index.add.assert_called_with([VERSION_FILENAME, NOTES_FILENAME])
        self.repo.index.commit.assert_called_once_with("release: 2.18.1.2-alpha")
        self.repo.git.checkout.assert_called_once_with("-b", "release_2.18")
        self.repo.create_tag.assert_called_once_with("release_2.18.1.2-alpha")
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """## 2.18.1.2-alpha
*released: Mar 21, 2024 01:23 AM UTC*
- boom! *(feat)*
- big *(docs)*
- it good *(fix)*

previous notes
""",
            )
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=18
fix=1
build=2
variant="alpha"
timestamp="2024-03-21T01:23:45+00:00"
""",
            )

    @freeze_time("2024-03-21 01:23:45")
    def test_will_increment_a_fix_on_release_branch(self):
        self.repo.active_branch.name = "release_2.17"
        self.repo.iter_commits = lambda: [
            Commit("docs: big"),
            Commit("fix: it good"),
            Commit("release: 2.10.2.2-alpha"),
        ]
        Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.repo.index.add.assert_called_with([VERSION_FILENAME, NOTES_FILENAME])
        self.repo.index.commit.assert_called_with("release: 2.17.2.2-alpha")
        self.repo.git.checkout.assert_not_called()
        self.repo.create_tag.assert_called_once_with("release_2.17.2.2-alpha")
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """## 2.17.2.2-alpha
*released: Mar 21, 2024 01:23 AM UTC*
- big *(docs)*
- it good *(fix)*

previous notes
""",
            )
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=2
build=2
variant="alpha"
timestamp="2024-03-21T01:23:45+00:00"
""",
            )

    @freeze_time("2024-03-21 01:23:45")
    def test_will_not_error_on_wip_after_release(self):
        self.repo.iter_commits = lambda: [
            Commit("docs: big"),
            Commit("release: 2.3.4.5-alpha"),
            Commit("wip: it good"),
        ]
        Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.repo.index.add.assert_called_with([VERSION_FILENAME, NOTES_FILENAME])
        self.repo.index.commit.assert_called_with("release: 2.17.1.3-alpha")
        self.repo.git.checkout.assert_not_called()
        self.repo.create_tag.assert_called_once_with("release_2.17.1.3-alpha")
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """## 2.17.1.3-alpha
*released: Mar 21, 2024 01:23 AM UTC*
- big *(docs)*

previous notes
""",
            )
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=3
variant="alpha"
timestamp="2024-03-21T01:23:45+00:00"
""",
            )

    def test_error_when_feature_is_put_on_a_release_branch(self):
        self.repo.active_branch.name = "release_2.4"
        self.repo.iter_commits = lambda: [Commit("fix: it good"), Commit("feat: big")]
        with self.assertRaises(ReleaseTestError):
            Release(self.repo, self.error, VERSION_FILENAME, NOTES_FILENAME)()
        self.error.assert_called_with(
            'Additional features can only go on the "master" branch while a release branch is checked out'
        )
        self.repo.index.add.assert_not_called()
        with open(NOTES_FILENAME, "r") as file:
            self.assertEqual(file.read(), "previous notes\n")
        with open(VERSION_FILENAME, "r") as file:
            self.assertEqual(
                file.read(),
                """
##################################################
# DO NOT EDIT THIS FILE MANUALLY
# use the release tool by executing `make release`
# on the master branch or a release branch
##################################################

[version]
major=2
minor=17
fix=1
build=2
variant="alpha"
timestamp="2023-11-30T15:30:00.000Z"
""",
            )


if __name__ == "__main__":
    unittest.main()
